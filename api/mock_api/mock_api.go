// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ankeesler/wildcat-countdown/api (interfaces: IntervalHolder)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockIntervalHolder is a mock of IntervalHolder interface
type MockIntervalHolder struct {
	ctrl     *gomock.Controller
	recorder *MockIntervalHolderMockRecorder
}

// MockIntervalHolderMockRecorder is the mock recorder for MockIntervalHolder
type MockIntervalHolderMockRecorder struct {
	mock *MockIntervalHolder
}

// NewMockIntervalHolder creates a new mock instance
func NewMockIntervalHolder(ctrl *gomock.Controller) *MockIntervalHolder {
	mock := &MockIntervalHolder{ctrl: ctrl}
	mock.recorder = &MockIntervalHolderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIntervalHolder) EXPECT() *MockIntervalHolderMockRecorder {
	return m.recorder
}

// GetInterval mocks base method
func (m *MockIntervalHolder) GetInterval() time.Duration {
	ret := m.ctrl.Call(m, "GetInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetInterval indicates an expected call of GetInterval
func (mr *MockIntervalHolderMockRecorder) GetInterval() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterval", reflect.TypeOf((*MockIntervalHolder)(nil).GetInterval))
}

// SetInterval mocks base method
func (m *MockIntervalHolder) SetInterval(arg0 time.Duration) error {
	ret := m.ctrl.Call(m, "SetInterval", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInterval indicates an expected call of SetInterval
func (mr *MockIntervalHolderMockRecorder) SetInterval(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInterval", reflect.TypeOf((*MockIntervalHolder)(nil).SetInterval), arg0)
}
