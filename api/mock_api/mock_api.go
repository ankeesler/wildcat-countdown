// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ankeesler/wildcat-countdown/api (interfaces: IntervalSetter)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockIntervalSetter is a mock of IntervalSetter interface
type MockIntervalSetter struct {
	ctrl     *gomock.Controller
	recorder *MockIntervalSetterMockRecorder
}

// MockIntervalSetterMockRecorder is the mock recorder for MockIntervalSetter
type MockIntervalSetterMockRecorder struct {
	mock *MockIntervalSetter
}

// NewMockIntervalSetter creates a new mock instance
func NewMockIntervalSetter(ctrl *gomock.Controller) *MockIntervalSetter {
	mock := &MockIntervalSetter{ctrl: ctrl}
	mock.recorder = &MockIntervalSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIntervalSetter) EXPECT() *MockIntervalSetterMockRecorder {
	return m.recorder
}

// SetInterval mocks base method
func (m *MockIntervalSetter) SetInterval(arg0 time.Duration) error {
	ret := m.ctrl.Call(m, "SetInterval", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInterval indicates an expected call of SetInterval
func (mr *MockIntervalSetterMockRecorder) SetInterval(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInterval", reflect.TypeOf((*MockIntervalSetter)(nil).SetInterval), arg0)
}
