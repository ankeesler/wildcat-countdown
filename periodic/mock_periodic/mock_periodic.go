// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ankeesler/wildcat-countdown/periodic (interfaces: StoreClient)

// Package mock_periodic is a generated GoMock package.
package mock_periodic

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStoreClient is a mock of StoreClient interface
type MockStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockStoreClientMockRecorder
}

// MockStoreClientMockRecorder is the mock recorder for MockStoreClient
type MockStoreClientMockRecorder struct {
	mock *MockStoreClient
}

// NewMockStoreClient creates a new mock instance
func NewMockStoreClient(ctrl *gomock.Controller) *MockStoreClient {
	mock := &MockStoreClient{ctrl: ctrl}
	mock.recorder = &MockStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStoreClient) EXPECT() *MockStoreClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStoreClient) Get(arg0 string) (interface{}, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStoreClientMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStoreClient)(nil).Get), arg0)
}

// Set mocks base method
func (m *MockStoreClient) Set(arg0 string, arg1 interface{}) error {
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockStoreClientMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStoreClient)(nil).Set), arg0, arg1)
}
